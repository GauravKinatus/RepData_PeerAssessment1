33/26
33/36
deck
1/52
52
4/52
0
12/52
1/11
2/11
2/12
1/11
2/11
info()
2/12
2/13
2/10
2/133
2/13
2/10
2/11
2/12
info()
2/52
2/51
0.64
.64
mypdf()
?mypdf
mypdf
?integrate()
integrate(mypdf,lower=0,upper=1.6)
1
2^.5
install.packages("kernlab")
?qunif
qunif(.75)
qunif
qunif(.75,0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
library(swirl)
swirl()
install.packages("knitr")
install.packages("markdown")
install.packages("slidify")
install.packages("slidfy")
install.packages("slidify")
install.packages("xtable")
?pnorm
pnorm()
pnorm(q=.4,mean = 80, sd= 10, lower.tail = TRUE)
qnorm()
pnorm(q=40,mean = 80, sd= 10, lower.tail = TRUE)
pnorm(q=40,mean = 80, sd= 10, lower.tail = TRUE)*100
qnorm(95, mean= 1100, sd= 75)
qnorm(.95, mean= 1100, sd= 75)
pnorm(q=.4,mean = 80, sd= 10, lower.tail = TRUE)
pnorm(q=.4,mean = 80, sd= 10, lower.tail = TRUE) *100
swirl()
library(swirl)
swirl
swirl()
dice_sqr
bye
quit
quit()
library(swirl)
swirl()
.8^3*.2^2
choose(5,3)*(.8)^3*(.2)(5-3)
choose(5,3)*(.8)^3*(.2)*(5-3)
choose(5,3)*(.8)^3*(.2)*(5-3)+choose(5,4)*(.8)^4*(.2)*(5-4)+choose(5,5)*(.8)^5*(.2)*(5-5)
(choose(5,3)*(.8)^3*(.2)*(5-3))+(choose(5,4)*(.8)^4*(.2)*(5-4))+(choose(5,5)*(.8)^5*(.2)*(5-5))
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
qnorm(.1)
0
qnorm(.975,mean=3,sd=2)
3+s*1.96
3+2*1.96
pnorm(1200, mean=1020, sd=50)
pnorm(1200, mean=1020, sd=50, lower.tail=FALSE)
pnorm((1200-1020/50),lower.tail=FALSE)
pnorm((1200-1020/50),lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(.75, mean=1020, sd=50)
pnorm(qnorm(.53))
qnorm(pnorm(.53))
ppois(.03,2.5*4)
ppois(3,2.5*4)
pbinom(5,1000,.01)
ppois(5,1000*0.1)
ppois(5,1000*0.01)
exit
exit()
quit()
pnorm(70,mean=80, sd=10, lower.tail=TRUE)
qnorm(95,mean=1100, sd=75)
qnorm(70,mean=80,sd=10,lower.tail=TRUE)
qnorm(.7,mean=80,sd=10,lower.tail=TRUE)
pnorm(95,mean=1100,sd=70)
qnorm(95,mean=1100,sd=70)
qnorm(.95,mean=1100,sd=70)
qnorm(.95,mean=1100,sd=75)
round(sqrt((100 - 1) * 75^2/qchisq(c(0.975, 0.025), 100 - 1)), 3)
pbinom(3, size = 5, prob = .5)
pbinom(4, size = 5, prob = .5)
1-pbinom(3, size = 5, prob = .5)
ppois(10,3*5)
data_pa
data_pa <- read.csv("activity.csv", header= TRUE)
require(dplyr)
require(reshape2)
data_pa_melt<-melt(data_pa,id=c("date","interval"))
daily_steps<-dcast(data_pa_melt,date~.,sum, drop = TRUE)
daily_complete <- daily_steps[which(complete.cases(daily_steps)),]
colnames(daily_complete) <- c("date","steps")
setwad("/Users/ggarg/Documents/Projects/DataScience/courses/05_ReproducibleResearch/RepData_PeerAssessment1")
setwd("/Users/ggarg/Documents/Projects/DataScience/courses/05_ReproducibleResearch/RepData_PeerAssessment1")
data_pa <- read.csv("activity.csv", header= TRUE)
require(dplyr)
require(reshape2)
data_pa_melt<-melt(data_pa,id=c("date","interval"))
daily_steps<-dcast(data_pa_melt,date~.,sum, drop = TRUE)
daily_complete <- daily_steps[which(complete.cases(daily_steps)),]
colnames(daily_complete) <- c("date","steps")
xt <- colMeans(xtabs(steps~date+interval, data = data_pa))
xt <- as.data.frame(xt)
colnames(xt) <- c("Steps")
x_ticks <- seq(from = 0, to = 2500, by = 250)
xt <- mutate(xt, Interval = rownames(xt))
with(xt,plot(Interval, Steps, type = 'l'))
title(main="Time Series Plot, average number of steps taken")
axis(1, at=x_ticks)
dev.copy(png,filename="./figures/PA1_Plot2.png")
dev.off()
summary(daily_complete)
head(daily_complete)
steps_by_interval <- dcast(data_pa_melt, interval~., sum, drop=TRUE)
head(steps_by_interval)
tail(steps_by_interval)
steps_by_interval <- dcast(data_pa_melt, interval~., sum, drop=TRUE)
complete_interval <- steps_by_interval[which(complete.cases(steps_by_interval))]
head(complete_interval)
complete_interval <- steps_by_interval[which(complete.cases(steps_by_interval)),]
head(complete_interval)
steps_by_interval
complete_interval
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~., sum, drop=TRUE)
data_pa_melt
head(data_pa_melt)
steps_by_interval <- dcast(data_pa_melt, interval+date~., sum, drop=TRUE)
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~steps, sum, drop=TRUE)
data_pa_melt<-melt(data_pa,id=c("date","interval"), value.var = "steps")
steps_by_interval <- dcast(data_pa_melt, interval~steps, sum, drop=TRUE)
head(data_pa_melt)
steps_by_interval <- dcast(data_pa_melt, interval~steps, sum, drop=TRUE)
steps_by_interval <- dcast(data_pa_melt, interval~., sum, drop=TRUE)
steps_by_interval
complete.cases(steps_by_interval)
steps_by_interval <- dcast(data_pa_melt, interval~., sum)
complete.cases(steps_by_interval)
steps_by_interval <- dcast(data_pa_melt, interval~., mean)
complete.cases(steps_by_interval)
head(steps_by_interval)
steps_by_interval <- dcast(data_pa_melt, step~date+interval, mean)
steps_by_interval <- dcast(data_pa_melt, interval~steps, mean)
steps_by_interval <- dcast(data_pa_melt, interval~date, mean)
head(steps_by_interval)
tail(data_pa_melt)
str(data_pa_melt)
summarize(data_pa_melt)
dim(data_pa_melt)
steps_by_interval <- dcast(data_pa_melt, interval~., mean)
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~.)
steps_by_interval <- dcast(data_pa_melt, interval~., drop = TRUE)
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~., fun.aggregate = sum, drop = TRUE)
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~., fun.aggregate = average, drop = TRUE)
steps_by_interval <- dcast(data_pa_melt, interval~., fun.aggregate = mean, drop = TRUE)
steps_by_interval
class(data_pa_melt)
str(data_pa_melt)
data_pa <- read.csv("activity.csv", header= TRUE,
colClasses=c("numeric","factor","factor"))
require(dplyr)
require(reshape2)
data_pa_melt<-melt(data_pa,id=c("date","interval"), value.var = "steps")
daily_steps<-dcast(data_pa_melt,date~.,sum, drop = TRUE)
daily_complete <- daily_steps[which(complete.cases(daily_steps)),]
colnames(daily_complete) <- c("date","steps")
str(data_pa)
str(data_pa_melt)
data_pa_melt
steps_by_interval <- dcast(data_pa_melt, interval~., fun.aggregate = mean, drop = TRUE)
str(steps_by_interval)
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~..., fun.aggregate = mean, drop = TRUE)
steps_by_interval
head(steps_by_interval)
steps_by_interval <- dcast(data_pa_melt, interval~variable, mean)
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~variable, mean(na.rm=TRUE))
steps_by_interval <- dcast(data_pa_melt, interval~variable, mean,na.rm=TRUE)
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~..., fun.aggregate = mean, na.rm=TRUE)
x_ticks <- seq(from = 0, to = 2500, by = 250)
with(steps_by_interval, interval, steps, type ='l')
with(steps_by_interval, plot(interval, steps, type ='l'))
data_pa <- read.csv("activity.csv", header= TRUE,
colClasses=c("numeric","date","factor"))
data_pa <- read.csv("activity.csv", header= TRUE,
colClasses=c("numeric","Date","factor"))
str(data_pa)
data_pa_melt<-melt(data_pa,id=c("date","interval"), value.var = "steps")
data_pa_melt<-melt(data_pa,id=c("date","interval"), value.var = "steps")
daily_steps<-dcast(data_pa_melt,date~.,sum, drop = TRUE, na.rm=TRUE)
steps_breaks <- seq (from=0,
to = (round(max(daily_complete$steps),-3)+5000),
by = 500)
hist(daily_steps$steps, main = "Histogram of Daily Sum of Steps", xlab = "Total Steps",
breaks = steps_breaks)
xmean <- mean(daily_steps$steps)
lines(c(xmean , xmean),c(0,10), col = "red", lwd = 2)
#save the plot to the figures directory
dev.copy(png,filename="./figures/pa1_figure1.png")
dev.off()
steps_breaks <- seq (from=0,
to = (round(max(daily_complete$steps),-3)+5000),
by = 500)
hist(daily_steps$steps, main = "Histogram of Daily Sum of Steps", xlab = "Total Steps",
breaks = steps_breaks)
str(daily_steps)
daily_steps<-dcast(data_pa_melt,date~variable,sum, drop = TRUE, na.rm=TRUE)
steps_breaks <- seq (from=0,
to = (round(max(daily_complete$steps),-3)+5000),
by = 500)
hist(daily_steps$steps, main = "Histogram of Daily Sum of Steps", xlab = "Total Steps",
breaks = steps_breaks)
steps_breaks <- seq (from=0,
to = (round(max(daily_complete$steps),-3)+5000),
by = 500)
hist(daily_steps$steps, main = "Histogram of Daily Sum of Steps", xlab = "Total Steps",
breaks = steps_breaks)
xmean <- mean(daily_steps$steps)
lines(c(xmean , xmean),c(0,10), col = "red", lwd = 2)
#save the plot to the figures directory
dev.copy(png,filename="./figures/pa1_figure1.png")
dev.off()
steps_by_interval <- dcast(data_pa_melt, interval~variable, fun.aggregate = mean, na.rm=TRUE)
x_ticks <- seq(from = 0, to = 2500, by = 250)
with(xt,plot(Interval, Steps, type = 'l'))
title(main="Time Series Plot, average number of steps taken")
axis(1, at=x_ticks)
dev.copy(png,filename="./figures/PA1_Plot2.png")
dev.off()
steps_by_interval <- dcast(data_pa_melt, interval~variable, fun.aggregate = mean, na.rm=TRUE)
x_ticks <- seq(from = 0, to = 2500, by = 250)
with(steps_by_interval,plot(interval, steps, type = 'l'))
title(main="Time Series Plot, average number of steps taken")
axis(1, at=x_ticks)
dev.copy(png,filename="./figures/PA1_figure2.png")
dev.off()
axis(1, at=x_ticks)
str(steps_by_interval)
steps_by_interval
steps_by_interval <- dcast(data_pa_melt, interval~variable, fun.aggregate = mean, na.rm=TRUE)
x_ticks <- seq(from = 0, to = 2500, by = 250)
with(steps_by_interval,plot(interval, steps))
title(main="Time Series Plot, average number of steps taken")
axis(1, at=x_ticks)
with(steps_by_interval,plot(interval, steps, type='l'))
View(steps_by_interval)
class(steps_by_interval)
str(steps_by_interval)
max(steps_by_interval$steps)
which.max(steps_by_interval$steps)
steps_by_interval[which.max(steps_by_interval$steps),]
steps_by_interval <- dcast(data_pa_melt, interval~variable, fun.aggregate = mean,
na.rm=TRUE, order_by=interval)
View(steps_by_interval)
ddaply()
sapply
lapply(data_pa, use_interval_mean, if (is.na(data_pa$steps))
data_pa2 <- join(data_pa,steps_by_interval,by=interval)
library(plyr)
data_pa2 <- join(data_pa,steps_by_interval,by=interval)
data_pa2 <- merge(data_pa,steps_by_interval,by=interval)
data_pa2 <- merge(data_pa,steps_by_interval,by=interval)
str(data_pa)
str(steps_by_interval)
data_pa2 <- merge(data_pa,steps_by_interval,by='interval'')
data_pa2 <- merge(data_pa,steps_by_interval,by='interval')
data_pa2 <- merge(data_pa,steps_by_interval,by='interval')
dim(data_pa)
dim(data_pa2)
head(data_pa)
head(data_pa2)
head(data_pa2, order_by=date)
View(data_pa2)
data_pa.incomplete <- !complete.cases(data_pa)
data_pa.complete <- complete.cases(data_pa)
dim(data_pa.incomplete)
complete.cases(data_pa)
data_pa.complete <- data_pa[complete.cases(data_pa),]
dim(data_pa.complete)
data_pa.incomplete <- data_pa[!complete.cases(data_pa),]
dim(data_pa.incomplete)
dim(data_pa)
merge(data_pa.incomplete,steps_by_interval, by = 'interval')
data_pa.incomplete2<-merge(data_pa.incomplete,steps_by_interval, by = 'interval')
dim(data_pa.incomplete2)
data_pa.incomplete2<-merge(data_pa.incomplete,steps_by_interval, by = 'interval')[,2]
dim(data_pa.incomplete2)
data_pa.incomplete2<-merge(data_pa.incomplete,steps_by_interval, by = 'interval')[,-2]
dim(data_pa.incomplete2)
head(data_pa.incomplete2)
colnames(data_pa_incomplete2[,3])<-steps
colnames(data_pa_incomplete2[,3])<-"steps"
colnames(data_pa_incomplete2)[3]<-"steps"
colnames(data_pa_incomplete2$steps.y)<-"steps"
colnames(data_pa.incomplete2$steps.y) <-"steps"
colnames(data_pa.incomplete2)[3] <-"steps"
head(data_pa.incomplete2)
data.pa2 <- rbind(data_pa.complete, data_pa.incomplete2)
dim(data.pa2)
dim(data.pa)
dim(data_pa)
complete.cases(data_pa)
count(complete.cases(data_pa))
count(complete.cases(data.pa2))
str(data_pa2)
mutate(data_pa2, weekend=weekdays(data_pa2$date))
str(data_pa2)
data_pa.complete <- data_pa[complete.cases(data_pa),] # subset and get the complete records
data_pa.incomplete <- data_pa[!complete.cases(data_pa),] #subset and get the incomplete records
data_pa.incomplete2 <-merge(data_pa.incomplete,steps_by_interval,
by = 'interval')[,-2] #merge with interval means and drop x.steps
colnames(data_pa.incomplete2)[3] <-"steps" # rename the new column
data_pa2 <- rbind(data_pa.complete, data_pa.incomplete2)# create a new data frame
incomplete2 <- count(data_pa2) - sum(complete.cases(data_pa2))
data_pa.complete <- data_pa[complete.cases(data_pa),] # subset and get the complete records
data_pa.incomplete <- data_pa[!complete.cases(data_pa),] #subset and get the incomplete records
data_pa.incomplete2 <-merge(data_pa.incomplete,steps_by_interval,
by = 'interval')[,-2] #merge with interval means and drop x.steps
colnames(data_pa.incomplete2)[3] <-"steps" # rename the new column
data_pa2 <- rbind(data_pa.complete, data_pa.incomplete2)# create a new data frame
dim(data_pa2)
pa_data2$Weekend = cut.POSIXt(pa_data2, breaks = DSTday,c("Weekday","Weekend"))
data_pa2$Weekend = cut.POSIXt(data_pa2, breaks = DSTday,c("Weekday","Weekend"))
data_pa2$Weekend = cut.POSIXt(data_pa2$date, breaks = DSTday,c("Weekday","Weekend"))
data_pa2$Weekend = cut.POSIXt(as.Date(data_pa2$date), breaks = DSTday,c("Weekday","Weekend"))
data_pa2$Weekend = cut(data_pa2$date, breaks = DSTday,c("Weekday","Weekend"))
data_pa2$Weekend = cut(data_pa2$date, breaks = 'DSTday',c("Weekday","Weekend"))
dim(data_pa2)
str(data_pa2)
data_pa2$weekday = cut(data_pa2$date,breaks=is.weekday(data_pa2$date))
data_pa2$weekday = cut(data_pa2$date,breaks=ifelse(weekday(data_pa2$date) %in% c("Saturday","Sunday"),"weekend","weekday")
)
data_pa2$weekday = cut(data_pa2$date,breaks=ifelse(weekdays(data_pa2$date) %in% c("Saturday","Sunday"),"weekend","weekday")
)
data_pa2$weekday = cut(data_pa2$date,breaks=day)
data_pa2$weekday = cut(data_pa2$date,breaks="day")
str(data_pa2)
data_pa2$weekday = cut.Date(data_pa2$date,breaks="day")
str(data_pa2)
View(data_pa2)
data_pa2$weekday = cut.Date(data_pa2$date,breaks="DSTday")
data_pa2$weekday = cut.Date(data_pa2$date,breaks="week")
View(data_pa2)
data_pa2$weekday = cut(data_pa2$date,breaks=weekdays(data_pa2$date))
data_pa2$weekday = ifelse(weekdays(data_pa2$date) %in% c("Saturday","Sunday"), "weekend","weekday")
View(data_pa2)
data_pa2$weekday = weekdays(data_pa2$date)
data_pa2$weekend? = ifelse(weekdays(data_pa2$date) %in% c("Saturday","Sunday"), "weekend","weekday")
data_pa2$dayofweek = weekdays(data_pa2$date)
data_pa2$weekday = ifelse(weekdays(data_pa2$date) %in% c("Saturday","Sunday"), "weekend","weekday")
View(data_pa2)
str(data_pa2)
data_pa2$weekday = factor(ifelse(weekdays(data_pa2$date) %in% c("Saturday","Sunday"), "weekend","weekday"))
str(data_pa2)
table(data_pa2)
View(data_pa2)
data_pa2$weekday = as.factor(ifelse(weekdays(data_pa2$date) %in% c("Saturday","Sunday"), "weekend",
str(data_pa2)
data_pa_melt2<-melt(data_pa2,id=c("date","interval"), value.var = "steps")
daily_steps2<-dcast(data_pa_melt2,date~variable,sum, drop = TRUE, na.rm=TRUE)
hist(daily_steps2$steps, main = "Histogram of Daily Sum of Steps (Adjusted)", xlab = "Total Steps",
breaks = steps_breaks)
xmean2 <- mean(daily_steps2$steps)
xmedian2 <- median(daily_steps2$steps)
data_pa.complete <- data_pa[complete.cases(data_pa),] # subset and get the complete records
data_pa.incomplete <- data_pa[!complete.cases(data_pa),] #subset and get the incomplete records
data_pa.incomplete2 <-merge(data_pa.incomplete,steps_by_interval,
by = 'interval')[,-2] #merge with interval means and drop x.steps
colnames(data_pa.incomplete2)[3] <-"steps" # rename the new column
data_pa2 <- rbind(data_pa.complete, data_pa.incomplete2)# create a new data frame
incomplete2 <- count(data_pa2) - sum(complete.cases(data_pa2))
str(data_pa2)
data_pa2$weekday = as.factor(ifelse(weekdays(data_pa2$date) %in% c("Saturday","Sunday"), "weekend","weekday")
)
str(data_pa2)
str(data_pa2)
data_pa <- read.csv("activity.csv", header= TRUE)
require(dplyr)
require(reshape2)
data_pa_melt<-melt(data_pa,id=c("date","interval"), value.var = "steps")
daily_steps<-dcast(data_pa_melt,date~variable,sum, drop = TRUE, na.rm=TRUE)
steps_breaks <- seq (from=0,
to = (round(max(daily_complete$steps),-3)+5000),
by = 500)
hist(daily_steps$steps, main = "Histogram of Daily Sum of Steps", xlab = "Total Steps",
breaks = steps_breaks)
xmean <- mean(daily_steps$steps)
xmedian <- median(daily_steps$steps)
lines(c(xmean , xmean),c(0,10), col = "red", lwd = 2)
#save the plot to the figures directory
dev.copy(png,filename="./figures/pa1_figure1.png")
dev.off()
steps_by_interval <- dcast(data_pa_melt, interval~variable, fun.aggregate = mean,
na.rm=TRUE, order_by=interval)
x_ticks <- seq(from = 0, to = 2500, by = 250)
with(steps_by_interval,plot(interval, steps, type='l'))
title(main="Time Series Plot, average number of steps taken")
axis(1, at=x_ticks)
dev.copy(png,filename="./figures/PA1_figure2.png")
dev.off()
data_pa.complete <- data_pa[complete.cases(data_pa),] # subset and get the complete records
data_pa.incomplete <- data_pa[!complete.cases(data_pa),] #subset and get the incomplete records
data_pa.incomplete2 <-merge(data_pa.incomplete,steps_by_interval,
by = 'interval')[,-2] #merge with interval means and drop x.steps
colnames(data_pa.incomplete2)[3] <-"steps" # rename the new column
data_pa2 <- rbind(data_pa.complete, data_pa.incomplete2)# create a new data frame
incomplete2 <- count(data_pa2) - sum(complete.cases(data_pa2))
data_pa_melt2<-melt(data_pa2,id=c("date","interval"), value.var = "steps")
daily_steps2<-dcast(data_pa_melt2,date~variable,sum, drop = TRUE, na.rm=TRUE)
hist(daily_steps2$steps, main = "Histogram of Daily Sum of Steps (Adjusted)", xlab = "Total Steps",
breaks = steps_breaks)
xmean2 <- mean(daily_steps2$steps)
xmedian2 <- median(daily_steps2$steps)
lines(c(xmean2 , xmean2),c(0,10), col = "red", lwd = 2)
#save the plot to the figures directory
dev.copy(png,filename="./figures/pa1_figure3.png")
dev.off()
str(data_pa2)
data_pa2$weekday = factor(ifelse(weekdays(as.Date(data_pa2$date) %in% c("Saturday","Sunday"), "weekend",
"weekday"))
data_pa2$weekday = factor(ifelse(weekdays(as.Date(data_pa2$date) %in% c("Saturday","Sunday"), "weekend",
"weekday")))
data_pa2$weekday = factor(ifelse(weekdays(as.Date(data_pa2$date) %in% c("Saturday","Sunday"), "weekend",
"weekday")))
data_pa2$weekday = factor(ifelse(weekdays(as.Date(data_pa2$date)) %in% c("Saturday","Sunday"), "weekend",
"weekday"))
View(data_pa2)
str(data_pa2)
summary(data_pa2)
xtabs(weekday~steps,data_pa2 )
xtabs(weekday~steps,data_pa2,means )
xtabs(weekday~steps,data_pa2,mean )
xtabs(weekday~steps,data_pa2,mean)
xtabs(weekday~.,data_pa2,mean)
xtabs(weekday~.,data_pa2)
require(ggplot2, scales)
library(ggplot2,scales)
op <- par(mar = c(5,10,4,2) + 0.1)
# Use QPlot to plot and add asthetics
qplot(interval, steps, data=data_pa2,  facets = weekday~., geom=c("line")) +
scale_y_continuous("PM2.5 Emmission, in Tons", labels = comma) +
labs(x = "Interval", y = "Number of Steps",
title="Mean steps across interval by Weekend/Weekday")
qplot(interval, steps, data=data_pa2,  facets = weekday~., geom=c("line"))
data_pa_melt2<-melt(data_pa2,id=c("date","interval","weekend"), value.var = "steps")
steps_by_weekend2 <- dcast(data_pa_melt2, weekend~variable, fun.aggregate = mean,
na.rm=TRUE, order_by=weekend)
data_pa_melt2<-melt(data_pa2,id=c("date","interval","weekday"), value.var = "steps")
steps_by_weekend2 <- dcast(data_pa_melt2, weekday~variable, fun.aggregate = mean,
na.rm=TRUE, order_by=weekday)
data_pa_melt2<-melt(data_pa2,id=c("date","interval","weekday"), value.var = "steps")
steps_by_weekend2 <- dcast(data_pa_melt2, weekday~variable, fun.aggregate = mean,
na.rm=TRUE, order_by=weekday)
# set margins
op <- par(mar = c(5,10,4,2) + 0.1)
# Use QPlot to plot and add asthetics
qplot(interval, steps, data=data_pa2,  facets = weekday~., geom=c("line")) +
scale_y_continuous("Number of Steps", labels = comma) +
labs(x = "Interval", y = "Number of Steps",
title="Mean steps across interval by Weekend/Weekday")
op <- par(mar = c(5,10,4,2) + 0.1)
# Use QPlot to plot and add asthetics
qplot(interval, steps, data=data_pa2,  facets = weekday~., geom=c("line"))
qplot(interval, steps, data=data_pa_melt2,  facets = weekday~., geom=c("line"))
str(data_pa_melt2)
qplot(interval, variable, data=data_pa_melt2,  facets = weekday~., geom=c("line")) +
qplot(interval, variable, data=data_pa_melt2,  facets = weekday~., geom=c("line"))
str(data_pa_melt2)
qplot(interval, steps, data=steps_by_weekend2,  facets = weekday~., geom=c("line"))
str(steps_by_weekend2)
steps_by_weekend2
steps_by_weekend2 <- dcast(data_pa_melt2, weekday+interval~variable, fun.aggregate = mean,
na.rm=TRUE, order_by=weekday)
steps_by_weekend2
steps_by_weekend2 <- dcast(data_pa_melt2, weekday+interval~variable, fun.aggregate = mean,
na.rm=TRUE, order_by=interval)
qplot(interval, steps, data=steps_by_weekend2,  facets = weekday~., geom=c("line"))
